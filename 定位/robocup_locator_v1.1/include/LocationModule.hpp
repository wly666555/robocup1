/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: LocationModule.idl
  Source: LocationModule.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_LOCATIONMODULE_HPP
#define DDSCXX_LOCATIONMODULE_HPP


namespace LocationModule
{
class LocationResult
{
private:
 float robot2field_x_ = 0.0f;
 float robot2field_y_ = 0.0f;
 float robot2field_theta_ = 0.0f;

public:
  LocationResult() = default;

  explicit LocationResult(
    float robot2field_x,
    float robot2field_y,
    float robot2field_theta) :
    robot2field_x_(robot2field_x),
    robot2field_y_(robot2field_y),
    robot2field_theta_(robot2field_theta) { }

  float robot2field_x() const { return this->robot2field_x_; }
  float& robot2field_x() { return this->robot2field_x_; }
  void robot2field_x(float _val_) { this->robot2field_x_ = _val_; }
  float robot2field_y() const { return this->robot2field_y_; }
  float& robot2field_y() { return this->robot2field_y_; }
  void robot2field_y(float _val_) { this->robot2field_y_ = _val_; }
  float robot2field_theta() const { return this->robot2field_theta_; }
  float& robot2field_theta() { return this->robot2field_theta_; }
  void robot2field_theta(float _val_) { this->robot2field_theta_ = _val_; }

  bool operator==(const LocationResult& _other) const
  {
    (void) _other;
    return robot2field_x_ == _other.robot2field_x_ &&
      robot2field_y_ == _other.robot2field_y_ &&
      robot2field_theta_ == _other.robot2field_theta_;
  }

  bool operator!=(const LocationResult& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::LocationModule::LocationResult>::getTypeName()
{
  return "LocationModule::LocationResult";
}

template <> constexpr bool TopicTraits<::LocationModule::LocationResult>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::LocationModule::LocationResult>::type_map_blob_sz() { return 318; }
template<> constexpr unsigned int TopicTraits<::LocationModule::LocationResult>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::LocationModule::LocationResult>::type_map_blob() {
  static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x07,  0x61,  0x7d,  0x2d,  0x8a,  0xda,  0x7f, 
 0x59,  0x41,  0xae,  0xc2,  0xf6,  0x09,  0xa0,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x8e,  0x52,  0x0e,  0xfa,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x9a,  0x15,  0x68,  0x9c,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xe6,  0xaf,  0x67,  0xfc,  0x00, 
 0xb4,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x7d,  0x1f,  0x1d,  0xfa,  0x08,  0x8e,  0x01, 
 0xb9,  0xea,  0xdd,  0xd9,  0x64,  0xc5,  0xe3,  0x00,  0x9c,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x4c,  0x6f,  0x63,  0x61, 
 0x74,  0x69,  0x6f,  0x6e,  0x4d,  0x6f,  0x64,  0x75,  0x6c,  0x65,  0x3a,  0x3a,  0x4c,  0x6f,  0x63,  0x61, 
 0x74,  0x69,  0x6f,  0x6e,  0x52,  0x65,  0x73,  0x75,  0x6c,  0x74,  0x00,  0x00,  0x68,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x0e,  0x00,  0x00,  0x00,  0x72,  0x6f,  0x62,  0x6f,  0x74,  0x32,  0x66,  0x69,  0x65,  0x6c,  0x64,  0x5f, 
 0x78,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x0e,  0x00,  0x00,  0x00,  0x72,  0x6f,  0x62,  0x6f,  0x74,  0x32,  0x66,  0x69,  0x65,  0x6c,  0x64,  0x5f, 
 0x79,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x72,  0x6f,  0x62,  0x6f,  0x74,  0x32,  0x66,  0x69,  0x65,  0x6c,  0x64,  0x5f, 
 0x74,  0x68,  0x65,  0x74,  0x61,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x7d,  0x1f,  0x1d,  0xfa,  0x08,  0x8e,  0x01,  0xb9,  0xea,  0xdd,  0xd9,  0x64,  0xc5,  0xe3,  0xf1, 
 0x07,  0x61,  0x7d,  0x2d,  0x8a,  0xda,  0x7f,  0x59,  0x41,  0xae,  0xc2,  0xf6,  0x09,  0xa0, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::LocationModule::LocationResult>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x07,  0x61,  0x7d,  0x2d,  0x8a,  0xda,  0x7f,  0x59,  0x41,  0xae,  0xc2, 
 0xf6,  0x09,  0xa0,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x7d,  0x1f,  0x1d,  0xfa,  0x08,  0x8e,  0x01,  0xb9,  0xea,  0xdd,  0xd9, 
 0x64,  0xc5,  0xe3,  0x00,  0xa0,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::LocationModule::LocationResult>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::LocationModule::LocationResult>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::LocationModule::LocationResult)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::LocationModule::LocationResult>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::LocationModule::LocationResult& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.robot2field_x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.robot2field_y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.robot2field_theta()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::LocationModule::LocationResult& instance, bool as_key) {
  auto &props = get_type_props<::LocationModule::LocationResult>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::LocationModule::LocationResult& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.robot2field_x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.robot2field_y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.robot2field_theta()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::LocationModule::LocationResult& instance, bool as_key) {
  auto &props = get_type_props<::LocationModule::LocationResult>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::LocationModule::LocationResult& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.robot2field_x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.robot2field_y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.robot2field_theta()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::LocationModule::LocationResult& instance, bool as_key) {
  auto &props = get_type_props<::LocationModule::LocationResult>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::LocationModule::LocationResult& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.robot2field_x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.robot2field_y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.robot2field_theta()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::LocationModule::LocationResult& instance, bool as_key) {
  auto &props = get_type_props<::LocationModule::LocationResult>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_LOCATIONMODULE_HPP
