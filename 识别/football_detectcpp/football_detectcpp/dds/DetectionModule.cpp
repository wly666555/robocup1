/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: DetectionModule.idl
  Source: DetectionModule.cpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#include "DetectionModule.hpp"//引入头文件，为下文类和函数提供声明
//采用多重命名空间组织代码，防止命名冲突
namespace org{
namespace eclipse{

namespace cyclonedds{
namespace core{
namespace cdr{
//模板特化函数
template<>
propvec &get_type_props<::DetectionModule::DetectionResult>() {
  static thread_local std::mutex mtx;//定义4个静态线程局部变量；mtx：互斥锁，保证多线程安全初始化
  static thread_local propvec props;//prop:保存属性描述的容器，每个线程有独立副本
  static thread_local entity_properties_t *props_end = nullptr;//指向props最后一个元素的下一个位置
  static thread_local std::atomic_bool initialized {false};//标记props是否已经初始化过
  key_endpoint keylist;//声明key_endpoint类型变量keylist，用于后续finish调用
  //如果已经初始化，则仅重置is_present为false，然后返回
  if (initialized.load(std::memory_order_relaxed)) {
    auto ptr = props.data();
    while (ptr < props_end)
      (ptr++)->is_present = false;
    return props;
  }
  //双重检查锁模式，防止多线程下重复初始化【上锁并二次检查初始化】
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed)) {
    auto ptr = props.data();
    while (ptr < props_end)
      (ptr++)->is_present = false;
    return props;
  }
  //清空属性向量，依次为DetectionResult类型每个成员添加属性描述
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bb_unset, extensibility::ext_final, false));  //::class_id
  props.push_back(entity_properties_t(1, 1, false, bb_unset, extensibility::ext_final, false));  //::class_name
  props.push_back(entity_properties_t(1, 2, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::box
  props.push_back(entity_properties_t(1, 3, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::score
  props.push_back(entity_properties_t(1, 4, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::xyz
  props.push_back(entity_properties_t(1, 5, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::offset
  props.push_back(entity_properties_t(1, 6, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::offset_fov

  entity_properties_t::finish(props, keylist);//finsh完成属性结构封装
  props_end = props.data() + props.size();//记录props_end
  initialized.store(true, std::memory_order_release);//设置initialized为true
  return props;
}

template<>
propvec &get_type_props<::DetectionModule::DetectionResults>() {
  static thread_local std::mutex mtx;
  static thread_local propvec props;
  static thread_local entity_properties_t *props_end = nullptr;
  static thread_local std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed)) {
    auto ptr = props.data();
    while (ptr < props_end)
      (ptr++)->is_present = false;
    return props;
  }
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed)) {
    auto ptr = props.data();
    while (ptr < props_end)
      (ptr++)->is_present = false;
    return props;
  }
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bb_unset, extensibility::ext_appendable));  //为root增加“可追加”拓展性
  props.push_back(entity_properties_t(1, 0, false, bb_unset, extensibility::ext_final, false));  //::results不可被拓展
  entity_properties_t::append_struct_contents(props, get_type_props<::DetectionModule::DetectionResult>());  //internal contents of ::results将result结构体内字段属性加到props中，实现嵌套

  entity_properties_t::finish(props, keylist);
  props_end = props.data() + props.size();
  initialized.store(true, std::memory_order_release);
  return props;
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org
//DetectionModule.cpp 的核心用途是为 DDS 分布式通信自动生成类型属性描述信息，确保自定义检测结果类型（如目标检测框、置信度、类别等）能够在 DDS 网络中安全、高效地序列化和传输。
